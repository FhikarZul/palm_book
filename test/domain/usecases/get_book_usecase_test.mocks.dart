// Mocks generated by Mockito 5.4.5 from annotations
// in palm_book/test/domain/usecases/get_book_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:palm_book/domain/entities/book_entity.dart' as _i5;
import 'package:palm_book/domain/repositories/book_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookRepository extends _i1.Mock implements _i3.BookRepository {
  MockBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<String, List<_i5.BookEntity>>> getBooks({
    required int? page,
    required String? search,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBooks,
          [],
          {
            #page: page,
            #search: search,
          },
        ),
        returnValue: _i4.Future<_i2.Either<String, List<_i5.BookEntity>>>.value(
            _FakeEither_0<String, List<_i5.BookEntity>>(
          this,
          Invocation.method(
            #getBooks,
            [],
            {
              #page: page,
              #search: search,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i5.BookEntity>>>);

  @override
  _i4.Future<_i2.Either<String, _i5.BookEntity>> getBook(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBook,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<String, _i5.BookEntity>>.value(
            _FakeEither_0<String, _i5.BookEntity>(
          this,
          Invocation.method(
            #getBook,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i5.BookEntity>>);
}
